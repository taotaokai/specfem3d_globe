#---
This file keep some notes about the code or the records of modifications I make to this fork version from CIG git repo. 
You need to sync this fork occasionally to merge the new updates in the CIG git repo.

Useful tips:

1) use " find src -type f | xargs grep tao " to find all changes made in the code

2) compile with -traceback to find which line in which source code run-time failure occurs, e.g. floating overflow.
   ref:"https://software.intel.com/en-us/articles/tips-for-debugging-run-time-failures-in-intel-fortran-applications"

#-----------------------------------------------
# about the compiler flags
#-----------------------------------------------
2015-08-14: Simple optimization flag -O 3 is enough. So other flags may confuse the
            compiler and result in less effecient code (e.g. upto 5 X slower).

2018-10-31: remove -xHost for ifort from flag.guess

#2015-06-16: configure and configure.ac
#  - change configure and configure.ac: AC_CONFIG_FILES:
#    Par_file,CMTSOLUTION,STATIONS -> AC_CONFIG_LINKS. 
#    This avoids configure replacing links of these files with the copy, because I usually
#    link these control files from another directory.
#NOTE: BAD idea. In case of later checks, we need the exact files which are used in the simulation but links can change or break. 
 
#-----------------------------------------------
# modified 1dref model for NEChina  
#-----------------------------------------------
replace src/meshfem3D/model_1dref.f90 with src/meshfem3D/customized_1d_model/FWEA18/model_1dref.f90.stage09.iter16.polyfit_um.linfit_mtz.vp_vs_voigt 

#-----------------------------------------------
# allow using external 410-/660-km topography map 
#-----------------------------------------------
- setup/constants.h.in: 
  add line of "logical,parameter :: USE_EXTERNAL_TOPO_410_660 = .true."

- src/meshfem3D/model_s362ani.f90: add new type topo_map and 
  subroutines read_model_file() and interp_bilinear() to read in
  external 410/660-km topo map

#-----------------------------------------------
# src/shared/model_topo_bathy.f90
#-----------------------------------------------
[2018-11-06]
  - changed the way how to interpolate the topo file since the original code really does not make sense to me. 
  - now use gridline registration, such as etopo1_ice_g_gmt4.grd 
    topo(lon,lat) lon:[-180,180], lat:[-90,90]

#-----------------------------------------------
# modle=GLL also reads in qmu
#-----------------------------------------------
[2018-11-18]
  - src/meshfem3D/meshfem3D_par.f90: line 121
  - src/meshfem3D/get_model.F90: line 175-205
  - src/meshfem3D/meshfem3D_models.F90: line 1023
  - src/meshfem3D/model_gll.f90

#-----------------------------------------------
# src/shared/auto_ner.f90
#-----------------------------------------------
[2018-11-07]
  - line318-320: use R80_FICTITIOUS_IN_MESHER instead of R80, which is desgined.

#-----------------------------------------------
# allow user defined time step: USER_DT
#-----------------------------------------------
[2018-11-07]

DATA/Par_file:
  # allow user defined time step: USER_DT (ignore if <= 0)
  USER_DT                   = 0.05d0 # second 

src/shared/: shared_par.f90, read_parameter_file.f90, broadcast_computed_parameters.f90

src/shared/get_timestep_and_layers.f90:
  - lines 528-532 

#-----------------------------------------------
# Fix the problem for SIMULATION_TYPE == 2  
#-----------------------------------------------
[2019-02-18] 

When SIMULATION_TYPE == 2 bug occurs when src/specfem3d/compute_add_sources.f90 trying to read in hxir_store
which should be defined at receiver points but actually defined at source point. I define additional
hxir_adj_store to solve this problem. hxir_store is still needed in src/specfem3d/compute_seismograms.f90:compute_seismograms_adjoint()

src/specfem3d/:
 
  - compute_add_sources.f90: 
    * lines 286-299: use hxir_adj_store for adjoint source when SIMULATION_TYPE == 2
 
  - setup_sources_receivers.f90
    * lines 1056-1063,1135-1168: compute hxir_adj_store

  - specfem3D_par.F90:
    * lines 302,313: define variables number_adj_receiver_global, hxir_adj_store

  - finalize_simulation.F90:
    * lines 299-303: deallocate number_adj_receiver_global, hxir_adj_store

#-----------------------------------------------
# Fix floating overflow problem in src/specfem3D/compute_arrays_source.f90
#-----------------------------------------------
[2019-02-21]

src/specfem3D/compute_arrays_source.f90:
  - lines 320-329: source_adjoint(icomp,"1:NSTEP_BLOCK") = adj_src_u(icomp,:) 
    323     ! KTAO: since NSTEP_BLOCK could be less than NTSTEP_BETWEEN_READ_ADJSRC,
    324     ! the orignal code has the risk to assign un-allocated memory content to 
    325     ! source_adjoint, which may cause floating number exceptions, e.g. overflow, 
    326     ! and halt the program when compiled with -fpe0 
    327     ! ref: http://www.ladon.iqfr.csic.es/intel/doc/main_for/mergedProjects/bldaps_for/using_the_floating_point_exception_handling_(-fpe)_option.htm  

#-----------------------------------------------
# src/specfem3D/write_output_SAC.f90:
#-----------------------------------------------
- correct the sub milli-second error

#-----------------------------------------------
# change to list-directed I/O when reading CMTSOLUTION
#-----------------------------------------------
- src/specfem3D/get_cmt.f90:
  ! read time shift
  !read(IIN,"(a)",iostat=ier) string
  read(IIN,*,iostat=ier) string, t_shift(isource)
  
  "time shift:" should either be replaced by "time_shift:" or be quoted.

- src/specfem3D/get_event_info.f90:

#-----------------------------------------------
# change how to read FORCESOLUTION
#-----------------------------------------------
- src/specfem3D/get_cmt.f90: lines 102-163:
    !-- ktao: get rid of reading lines of FORCESOLUTION at a specified position
    !-- ktao: the comment string on first column should not have spaces or quoted 
    !read(string(12:len_trim(string)),*) t_shift(isource)
    read(string,*) dummy_string, t_shift(isource)

#-----------------------------------------------
# src/specfem3D/locate_receivers.f90: 
#-----------------------------------------------
- switch the network/station order in the STATION files to be "net sta lat lon alt depth"

- lines352-362: avoid error in acos() due to values larger than one from rounding off error  

#-----------------------------------------------
# src/specfem3D/locate_sources.f90: 
#-----------------------------------------------
- lines 781-787: lines 793-798 are moved into if-else condition for CMTSOLUTION, since Mxx,Myy... are only used for CMTSOLUTION. Otherwise error might occur for un-initialized variables.
- [2019-07-19] this is further changed due to merging with upstream/master

#-----------------------------------------------
# add flag in Par_file to allow the use of ECEF coordinate
#-----------------------------------------------
DATA/Par_file:
  logical, parameter :: USE_ECEF_COORDINATE = .true.

src/shared/
  shared_par.f90: shared_input_parameters: logical :: USE_ECEF_COORDINATE
  read_parameter_file.f90: read_value_logical(USE_ECEF_COORDINATE, 'USE_ECEF_COORDINATE', ier)
  broadcast_computed_parameters.f90: USE_ECEF_COORDINATE = bcast_logical(67)

src/specfem3D/
  get_cmt.f90:
  locate_sources.f90: use ECEF x,y,z when locating points
  save_kernels.f90: save_kernels_source_derivative()
  specfem3D_par.F90: add x,y,z_source
  finalize_simulation.F90: add deallocate x,y,z_source

#-----------------------------------------------
# Allow USE_ECEF_COORDINATE with USE_FORCE_POINT_SOURCE
#-----------------------------------------------
[2019-02-22]

- src/specfem3D/get_force.f90: comp_dir_vect_source_E/N/Z_up(1:NSOURCES) --> comp_dir_vect_source(3,1:NSOURCES)
- src/specfem3D/locate_sources.f90: comp_dir_vect_source_E/N/Z_up(1:NSOURCES) --> comp_dir_vect_source(3,1:NSOURCES)
- src/specfem3D/setup_sources_receivers.f90: comp_dir_vect_source_E/N/Z_up(1:NSOURCES) --> comp_dir_vect_source(3,1:NSOURCES)
- src/specfem3D/finalize_simulation.F90: comp_dir_vect_source_E/N/Z_up(1:NSOURCES) --> comp_dir_vect_source(3,1:NSOURCES)
- src/specfem3D/specfem3D_par.F90: comp_dir_vect_source_E/N/Z_up(1:NSOURCES) --> comp_dir_vect_source(3,1:NSOURCES)

#-----------------------------------------------
# allow transverse isotropy in different regions: 
#-----------------------------------------------
DATA/Par_file:
  # forces transverse isotropy in certain types of elements
  # when all false dependeing on reference model:
  #  REFERENCE_1D_MODEL == REFERENCE_MODEL_1DREF: tiso between surface and 670
  #  other: tiso between surface and 220
  # see src/meshfem3D/compute_element_properties.f90: subroutine compute_element_tiso_flag(...)
  USE_FULL_TISO_CRUST_220                = .true.  # TISO between surface and 220
  USE_FULL_TISO_CRUST_UPPER_MANTLE       = .false. # TISO between surface and 670
  USE_FULL_TISO_MANTLE                   = .false. # TISO between moho and CMB 

src/shared/: shared_par.f90, read_parameter_file.f90, broadcast_computed_parameters.f90

src/meshfem3D/: compute_element_properties.f90, meshfem3D_par.f90

##-----------------------------------------------
## src/specfem3D/compute_seismograms.F90 and save_kernels.f90
##-----------------------------------------------
#  - fix scale_displ, scale_t in source frechet derivative Kp_delta
#  - fix units scaling problem in save_kernels_source()
#  - [2018-07-27] this is not needed as the newest version has corrected for this issue.
 
#======
#3. src/shared/get_model_parameters.F90:
#!!! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!!!  PROBLEM:
#!!! 
#!!! When I tried to read in GLL model for mesh created using
#!!! 1D_(transversely_)isotropic_prem error occurs because the mesh created by setting MODEL = GLL in 
#!!! Par_file is incompatible with model created by MODEL = 1D_(transversely_)isotropic_prem.
#!!! 
#!!! SOLUTION:
#!!! 
#!!!   1) introduce a new model identifier MODEL = 1D_(transversely_)isotropic_GLL
#!!! 
#!!! #---- src/shared/get_model_parameters.F90:
#!!!  else if (MODEL_ROOT == '1D_isotropic_GLL') then
#!!!      HONOR_1D_SPHERICAL_MOHO = .true.
#!!!      REFERENCE_1D_MODEL = GLL_REFERENCE_1D_MODEL
#!!!      THREE_D_MODEL = THREE_D_MODEL_GLL ! use this because the package doesn't
#!!!                                        ! implement ONE_D_MODEL_GLL 
#!!!  else if (MODEL_ROOT == '1D_transversely_isotropic_GLL') then
#!!!      HONOR_1D_SPHERICAL_MOHO = .true.
#!!!      TRANSVERSE_ISOTROPY = .true.
#!!!      REFERENCE_1D_MODEL = GLL_REFERENCE_1D_MODEL
#!!!      THREE_D_MODEL = THREE_D_MODEL_GLL ! use this because the package doesn't
#!!!                                        ! implement ONE_D_MODEL_GLL 
#!!! #----
#!!! 
#!!!   set MODEL = 1D_(transversely_)isotropic_GLL in DATA/Par_file as well.
#!!! 
#!!!   2) because GLL model is intended for 3D model, so we need to avoid any mesh
#!!! streching due to internal boundary topography.
#!!! 
#!!! #---- setup/constants.h.in:
#!!! ! to suppress element stretching for 3D moho surface
#!!!   logical,parameter :: SUPPRESS_MOHO_STRETCHING = .true.
#!!! 
#!!! ! to suppress element stretching at 410/660 internal topography
#!!! ! (i.e. creates mesh without 410/660 topography for Harvard model
#!!! (s362ani,..))
#!!!   logical,parameter :: SUPPRESS_INTERNAL_TOPOGRAPHY = .true.
#!!! #----
#!!! 
#!!!   3) don't forget to re-configure before compiling
#!!! 
#!!!   ./configure FC=ifort MPIFC=mpif90 # this will update the setup/constants.h
#!!!   ./make xmeshfem3D xspecfem3D$ 
#!!!    
#!!! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##-----------------------------------------------
## src/specfem3D/comp_source_time_function.f90:
##-----------------------------------------------
#- change to do while loop and read less than NSTEP time samples without error.
